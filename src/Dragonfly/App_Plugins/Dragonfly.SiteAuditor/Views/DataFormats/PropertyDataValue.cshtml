
@model Dragonfly.SiteAuditor.Models.NodePropertyDataTypeInfo

@{
    IHtmlString formattedValue = new HtmlString("");
    var renderingDone = false;

    var editor = Model.DataType.PropertyEditorAlias;
    var dbType = Model.DataType.DatabaseType;

    //Special handling based on editor
    switch (editor)
    {
        case "Umbraco.NestedContent":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/NestedContent.cshtml", Model.Property);
            renderingDone = true;
            break;

        case "Our.Umbraco.NestedContent":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/NestedContent.cshtml", Model.Property);
            renderingDone = true;
            break;

        case "Umbraco.MultiNodeTreePicker2":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/Mntp.cshtml", Model.Property);
            renderingDone = true;
            break;

        case "Umbraco.ContentPicker2":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/ContentPicker.cshtml", Model.Property);
            renderingDone = true;
            break;

        case "Tags":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/Tags.cshtml", Model.Property);
            renderingDone = true;
            break;

        case "Umbraco.MediaPicker2":
            var mediaImageVdd = new ViewDataDictionary();
            mediaImageVdd.Add("ImageWidth", 300);

            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/MediaImage.cshtml", Model.Property, mediaImageVdd);
            renderingDone = true;
            break;

    }

    //If we get here, handle based on DB type
    switch (dbType)
    {
        case DataTypeDatabaseType.Date:
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/DateValue.cshtml", Model.Property.GetValue<DateTime>());
            renderingDone = true;
            break;

        case DataTypeDatabaseType.Decimal:
            formattedValue = new HtmlString(Model.Property.GetValue<string>());
            break;

        case DataTypeDatabaseType.Integer:
            formattedValue = new HtmlString(Model.Property.GetValue<string>());
            break;

        case DataTypeDatabaseType.Nvarchar:
            formattedValue = new HtmlString(Model.Property.GetValue<string>());
            break;

        case DataTypeDatabaseType.Ntext:
            formattedValue = new HtmlString(Model.Property.GetValue<string>());
            break;

        default:
            //If we get here, who knows what happened, just use string
            formattedValue = new HtmlString(Model.Property.GetValue<string>());
            break;
    }

    if (!renderingDone)
    {
        <span>@formattedValue</span>
    }
}
